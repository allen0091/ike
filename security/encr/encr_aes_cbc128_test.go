package encr

import (
	"crypto/aes"
	"crypto/cipher"
	"testing"

	"github.com/stretchr/testify/require"
)

var (
	sk_ei_128 = []byte{
		0x54, 0x5e, 0x6b, 0x26, 0x57, 0x68, 0x0e, 0x51,
		0xc8, 0x87, 0x1e, 0xd9, 0xf9, 0x1b, 0x4b, 0xfe,
	}
	iv_nil_128 = []byte{
		0xdb, 0xe6, 0xdb, 0xac, 0x7a, 0x0e, 0x31, 0x94,
		0x5d, 0x7c, 0x3d, 0x36, 0xc4, 0x4e, 0x4e, 0x59,
	}
	padding_nil_128 = []byte{
		0x0e, 0x04, 0x20, 0x39, 0x6b, 0xf1, 0x5b, 0x53,
		0x06, 0x83, 0x3c, 0x2a, 0x51, 0xae, 0xd8, 0x0f,
	}
	cipherText_nil_128 = []byte{
		0xdb, 0xe6, 0xdb, 0xac, 0x7a, 0x0e, 0x31, 0x94,
		0x5d, 0x7c, 0x3d, 0x36, 0xc4, 0x4e, 0x4e, 0x59,
		0x6e, 0xab, 0x02, 0xad, 0xf9, 0x86, 0x3a, 0x6a,
		0x05, 0x35, 0x8a, 0x02, 0x6e, 0x69, 0x03, 0xd7,
	}
	iv_128 = []byte{
		0x10, 0x01, 0xaa, 0x50, 0xdc, 0x12, 0xa7, 0x19,
		0x04, 0xe8, 0xd8, 0x96, 0x29, 0x10, 0x37, 0x87,
	}
	padding_128 = []byte{
		0x6c, 0x7f, 0x4f, 0x78, 0x9e, 0x8e, 0x84, 0x07,
	}
	plainText_128 = []byte{
		0x29, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00,
		0x0a, 0x0a, 0x00, 0xca, 0x24, 0x00, 0x00, 0x08,
		0x00, 0x00, 0x40, 0x00, 0x27, 0x00, 0x00, 0x0c,
		0x01, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0x5e,
		0x21, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x00,
		0xae, 0xdf, 0xef, 0xe3, 0x75, 0x46, 0x6c, 0x42,
		0x32, 0x5c, 0xa4, 0xbe, 0x6f, 0x9d, 0x0e, 0xb8,
		0xb4, 0xb1, 0xde, 0x6c, 0x2c, 0x00, 0x00, 0x2c,
		0x00, 0x00, 0x00, 0x28, 0x01, 0x03, 0x04, 0x03,
		0xc6, 0x74, 0x91, 0x8a, 0x03, 0x00, 0x00, 0x0c,
		0x01, 0x00, 0x00, 0x0c, 0x80, 0x0e, 0x00, 0x80,
		0x03, 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x0c,
		0x00, 0x00, 0x00, 0x08, 0x05, 0x00, 0x00, 0x00,
		0x2d, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0xff, 0xff,
		0x0a, 0x0a, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0xff,
		0x29, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00,
		0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0xff, 0xff,
		0x0a, 0x0a, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0xff,
		0x29, 0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0x0c,
		0x29, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x40, 0x0d,
		0x0a, 0x64, 0x64, 0x7c, 0x29, 0x00, 0x00, 0x0c,
		0x00, 0x00, 0x40, 0x0d, 0xac, 0x10, 0x16, 0xfd,
		0x29, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x40, 0x0d,
		0xac, 0x10, 0x06, 0xfd, 0x29, 0x00, 0x00, 0x0c,
		0x00, 0x00, 0x40, 0x0d, 0xac, 0x1f, 0xff, 0xff,
		0x29, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x40, 0x0d,
		0xac, 0x11, 0x00, 0x01, 0x29, 0x00, 0x00, 0x0c,
		0x00, 0x00, 0x40, 0x0d, 0x0a, 0x64, 0x64, 0x0c,
		0x29, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x40, 0x0d,
		0xac, 0x10, 0x3d, 0x01, 0x29, 0x00, 0x00, 0x0c,
		0x00, 0x00, 0x40, 0x0d, 0xac, 0x10, 0x3e, 0x01,
		0x29, 0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0x14,
		0x29, 0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0x21,
		0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0x24,
	}
	cipherText_128 = []byte{
		0x10, 0x01, 0xaa, 0x50, 0xdc, 0x12, 0xa7, 0x19,
		0x04, 0xe8, 0xd8, 0x96, 0x29, 0x10, 0x37, 0x87,
		0xf0, 0x62, 0x84, 0x67, 0xdb, 0xda, 0x9b, 0x0c,
		0x64, 0x70, 0x29, 0xd3, 0x67, 0xb4, 0x40, 0xa1,
		0x7a, 0x99, 0x99, 0x12, 0x87, 0x75, 0xdd, 0x4c,
		0xc0, 0x5f, 0x9e, 0x34, 0xfc, 0xc7, 0x64, 0x8e,
		0x09, 0x6e, 0xeb, 0x6f, 0x67, 0xc8, 0x07, 0xe8,
		0xf1, 0xf3, 0x0b, 0xc4, 0xb0, 0x0a, 0x67, 0x6c,
		0x9d, 0x86, 0x7b, 0x87, 0xe6, 0x4b, 0x64, 0x14,
		0x73, 0xa2, 0x9b, 0xc2, 0x45, 0x78, 0xfd, 0x6d,
		0xa8, 0x75, 0x25, 0xbc, 0xa8, 0x65, 0x94, 0x27,
		0x9a, 0x3a, 0xb3, 0xe6, 0x71, 0xe3, 0x32, 0x01,
		0x69, 0x37, 0x16, 0x23, 0xa7, 0xaa, 0xd6, 0x8f,
		0x52, 0xf2, 0x10, 0x03, 0xe6, 0x6a, 0xba, 0x57,
		0x87, 0x7c, 0xad, 0xed, 0xe6, 0xe0, 0xc6, 0xa5,
		0xc3, 0xb3, 0xac, 0xf6, 0x83, 0xb4, 0x78, 0xcb,
		0x94, 0x91, 0x6b, 0xb0, 0xcd, 0xa1, 0x17, 0xb5,
		0x68, 0xfd, 0x17, 0x23, 0x9f, 0xbb, 0x31, 0xc1,
		0x5b, 0xb4, 0x12, 0xf3, 0x3c, 0xd7, 0x2f, 0xe8,
		0x2b, 0xba, 0x1d, 0x7f, 0x74, 0xf1, 0x01, 0x42,
		0x65, 0xbe, 0x7d, 0x4e, 0x4c, 0x56, 0x22, 0x4a,
		0x7b, 0x38, 0x58, 0x7d, 0x24, 0xa4, 0xed, 0x4f,
		0x7e, 0xa0, 0x12, 0x84, 0x90, 0x7f, 0x71, 0x90,
		0x0f, 0x12, 0x7d, 0x88, 0xf5, 0x6d, 0x3b, 0x31,
		0x41, 0x07, 0x39, 0x6d, 0xe5, 0xfa, 0x32, 0x2b,
		0xdf, 0xbf, 0x6b, 0xe7, 0xdb, 0xef, 0xe0, 0x8d,
		0x61, 0xf8, 0x3f, 0x74, 0x61, 0xe0, 0x50, 0x04,
		0xb3, 0x80, 0xd2, 0xb0, 0x03, 0x53, 0x44, 0xa1,
		0x43, 0xa4, 0xaf, 0xaa, 0x57, 0xda, 0x80, 0xdd,
		0x21, 0xa1, 0x13, 0xef, 0x4c, 0x04, 0x8e, 0xd5,
		0xf4, 0x65, 0x96, 0xe1, 0x30, 0xc6, 0x9a, 0x57,
		0xd8, 0x9d, 0xf2, 0x22, 0x94, 0x6c, 0x62, 0xf5,
		0xb9, 0x34, 0x9a, 0x37, 0x2e, 0xaf, 0xb6, 0xb8,
		0x24, 0xaa, 0x95, 0xfa, 0x6e, 0x99, 0xfa, 0x2d,
		0x79, 0xf2, 0x38, 0xc8, 0xfb, 0xbf, 0xf9, 0x2b,
		0x42, 0xed, 0xcc, 0x54, 0xbf, 0x4e, 0x97, 0x77,
		0xfa, 0x9a, 0xf8, 0x3c, 0x36, 0xba, 0xb4, 0x76,
		0x37, 0x66, 0x94, 0xab, 0x9c, 0x8b, 0x56, 0xc6,
	}
)

func TestEncrypt_128(t *testing.T) {
	var sk EncrAesCbcCrypto
	var block cipher.Block
	var err error
	var cipher []byte

	block, err = aes.NewCipher(sk_ei_128)
	require.NoError(t, err)

	sk = EncrAesCbcCrypto{
		Block:   block,
		Iv:      iv_nil_128,
		Padding: padding_nil_128,
	}
	require.NoError(t, err)
	cipher, err = sk.Encrypt(nil)
	require.NoError(t, err)
	require.Equal(t, cipherText_nil_128, cipher)

	sk = EncrAesCbcCrypto{
		Block:   block,
		Iv:      iv_128,
		Padding: padding_128,
	}
	require.NoError(t, err)
	cipher, err = sk.Encrypt(plainText_128)
	require.NoError(t, err)
	require.Equal(t, cipherText_128, cipher)
}

func TestDecrypt_128(t *testing.T) {
	var sk EncrAesCbcCrypto
	var err error
	var block cipher.Block
	var plain []byte

	block, err = aes.NewCipher(sk_ei_128)
	require.NoError(t, err)

	sk = EncrAesCbcCrypto{
		Block:   block,
		Iv:      iv_nil_128,
		Padding: padding_nil_128,
	}
	plain, err = sk.Decrypt(cipherText_nil_128)
	require.NoError(t, err)
	testnil := make([]byte, 0)
	require.Equal(t, testnil, plain)

	sk = EncrAesCbcCrypto{
		Block:   block,
		Iv:      iv_128,
		Padding: padding_128,
	}
	plain, err = sk.Decrypt(cipherText_128)
	require.NoError(t, err)
	require.Equal(t, plainText_128, plain)
}
